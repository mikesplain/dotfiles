#!/bin/bash
# Install all dotfiles into the home directory
DOTFILESDIRREL=$(dirname $0)
cd $DOTFILESDIRREL/..
ROOT=$(pwd -P)

# Setup chsh for codespaces
# TODO: This can probably be removed since we switched to unattended
if [ "$LOGNAME" = "codespace" ]; then
  echo Discovered codespace, prefixing sudo
  export CHSH_PREFIX=sudo
fi

echo before ohmyzsh

# Install ohmyzsh
if [ ! -d "$HOME/.oh-my-zsh" ]; then
  ! sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
fi

echo before auto suggestions

# Setup zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

echo before unames

[ $(uname -s) = "Darwin" ] && export OSX=1 && export UNIX=1
[ $(uname -s) = "Linux" ] && export LINUX=1 && export UNIX=1
uname -s | grep -q "_NT-" && export WINDOWS=1

echo before for loop

for DOTFILE in *; do
  HOMEFILE="$HOME/.$DOTFILE"
  [ -d $DOTFILE ] && DOTFILE="$DOTFILE/"
  DIRFILE="$ROOT/$DOTFILE"

  echo $DOTFILE | egrep -q '(^script/$|\.txt$|\.md$|^appconfigs/$)' && continue

  # Don't install some files unless you're also called Mike.
  if echo $USER | grep -vq 'mike'
  then
    echo $DOTFILE | grep -q 'gitconfig-user' && continue
    echo $DOTFILE | grep -q 'ssh' && continue
  fi

  echo $DOTFILE | grep -q '\.sh' \
    && HOMEFILE="$HOME/.$(echo $DOTFILE | sed -e 's/\.sh//')"

  if [ $UNIX ]
  then
    if [ -L "$HOMEFILE" ] && ! [ -d $DOTFILE ]
    then
      ln -sfv "$DIRFILE" "$HOMEFILE"
    else
      rm -rv "$HOMEFILE"
      ln -sv "$DIRFILE" "$HOMEFILE"
    fi
  else
    cp -rv "$DIRFILE" "$HOMEFILE"
  fi
done

echo before app configs

# Setup specific app configs

if [ $OSX ]; then
  cd appconfigs
  for APPCONFIG in *; do
    [ -f $APPCONFIG ] && continue
    echo "Setting up $APPCONFIG"
    "$APPCONFIG/setup"
  done

  # Install additional things
  # if ! [ -d $HOME/.spf13-vim-3 ]; then
  #   echo "Installing spf13-vim3"
  #   curl https://j.mp/spf13-vim3 -L | sh
  # fi

  # Setup Menumeters

  defaults write com.ragingmenace.MenuMeters \
    CPUAverageMultiProcs \
    -int 1

  defaults write com.ragingmenace.MenuMeters \
    CPUDisplayMode \
    -int 2

  defaults write com.ragingmenace.MenuMeters \
    MemDisplayMode \
    -int 4

  defaults write com.ragingmenace.MenuMeters \
    NetDisplayMode \
    -int 2

  defaults write com.ragingmenace.MenuMeters \
    com.ragingmenace.MenuMeterDisk \
    -int 0

  # Fix Logitech MX Master
  # https://www.reddit.com/r/MouseReview/comments/79fb7z/mx_master_2s_thumbwheel_scrolling_lags_has_play/
  defaults write .GlobalPreferences com.apple.mouse.scaling -1

  # General Mac Config

  # Minimize to app
  defaults write com.apple.dock minimize-to-application -int 1
  # Switch to Dark theme
  # osascript -e 'tell application "System Events" to tell appearance preferences to set dark mode to not dark mode'
  # Turn on tap to click by default
  sudo defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  sudo defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  sudo defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  # Show battery percent by default
  defaults write com.apple.menuextra.battery ShowPercent -string YES
  # Minimize to app in tray
  defaults write com.apple.dock minimize-to-application -int 1

  # Finder
  # Show status bar with free space at bottom of finder
  defaults write com.apple.finder ShowStatusBar 1
  # Show Pathbar in finder
  defaults write com.apple.finder ShowPathbar 1

  # Auto unhide Library
  chflags nohidden ~/Library
fi


# Setup go path
mkdir -p $HOME/go

pip3 install speedtest-cli --upgrade
pip3 install neovim --upgrade

# Install spacevim
curl -sLf https://spacevim.org/install.sh | bash

git clone https://github.com/gpakosz/.tmux.git $HOME/.tmux
ln -s -f $HOME/.tmux/.tmux.conf $HOME/.tmux.conf

###############################################################################
# Install asdf for version management
###############################################################################
asdf_dir=$HOME/.asdf
cd $HOME

if [ ! -d $asdf_dir ]; then
  echo "Installing asdf..."
  git clone https://github.com/asdf-vm/asdf.git $asdf_dir
  echo "asdf installation complete"
else
  echo "asdf already installed"
fi

###############################################################################
# Reload the .bashrc so we have asdf and all the other recently installed tools
###############################################################################
source $HOME/.shrc

# Install plugins

asdf plugin-add python https://github.com/danhper/asdf-python.git || true
asdf plugin-add golang https://github.com/kennyp/asdf-golang.git || true
asdf plugin-add sonobuoy https://github.com/mikesplain/asdf-sonobuoy.git || true
asdf plugin-add fluxctl https://github.com/stefansedich/asdf-fluxctl || true